#!/usr/bin/env python3

import argparse
import requests
from pymongo import MongoClient
from pyquery import PyQuery as pq
from selenium import webdriver
from bs4 import BeautifulSoup as jQuery
import re
import json

Options = webdriver.ChromeOptions()
Options.add_argument('--headless')
Options.add_argument("user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/601.3.9 (KHTML, like Gecko) Version/9.0.2 Safari/601.3.9")
browser = webdriver.Chrome(options=Options,executable_path='./chromedriver')


parser = argparse.ArgumentParser()
parser.add_argument('-account')
parser.add_argument('-database')
args = parser.parse_args()

database = MongoClient('localhost', 27017).twitter[args.database]

global databaseIndex
databaseIndex=0

def getAccountUrl(account):
    return 'https://twitter.com/' + account

def scrapeAccount(account):
    global databaseIndex
    accountUrl=getAccountUrl(account)
    browser.get(accountUrl)
    source=browser.page_source
    dom=jQuery(source,features="lxml")
    profileCard=dom.find("div",{"class":"ProfileHeaderCard"})
    photo=dom.find("img",{"class":"ProfileAvatar-image"})['src']
    name=profileCard.find("a",{"class":"ProfileHeaderCard-nameLink"}).text.strip()
    handle=profileCard.find("h2",{"class":"ProfileHeaderCard-screenname"}).text.strip().split("@")[1]
    bio=profileCard.find("p",{"class":"ProfileHeaderCard-bio u-dir"}).text.strip()
    location=profileCard.find("div",{"class":"ProfileHeaderCard-location"}).text.strip()
    website=profileCard.find("div",{"class":"ProfileHeaderCard-url"}).text.strip()
    joinDate=profileCard.find("div",{"class":"ProfileHeaderCard-joinDate"}).text.strip()
    birthdate=profileCard.find("div",{"class":"ProfileHeaderCard-birthdate"}).text.strip()
    relatedUsersModule=dom.find("div",{"class":"RelatedUsers"})
    relatedUsers=relatedUsersModule.find_all("div",{"class":"UserSmallListItem"})
    users=[]
    for relatedUser in relatedUsers:
        temp=relatedUser.find("span",{"class":"username"}).text.split("@")[1]
        users.append(temp)

    databaseIndex+=1
    userData={
        'name':name,
        'photo':photo,
        'handle':handle,
        'bio':bio,
        'location':location,
        'website':website,
        'joinDate':joinDate,
        'birthdate':birthdate,
        'relatedUsers':users,
        'index':databaseIndex
    }
    return userData

def storeAccount(userData):
    database.insert_one(userData)
    return True

def retrieveAccount(userData):
    account=database.find_one(userData)
    if(account):return account
    return False

def mongodbUnique(userData):
    if(retrieveAccount(userData)):
        return False
    else:
        return True

def main():
    initialAccount=scrapeAccount(args.account)
    print('initial:',initialAccount,'\n')
    storeAccount(initialAccount)
    currentUserIndex=1
    global databaseIndex
    while True:
        user=retrieveAccount({'index':currentUserIndex})
        if(not user):continue
        print('currentUser:',user['handle'])
        print('\n')
        for potentialUser in user['relatedUsers']:
            print('checking:',potentialUser)
            userData=scrapeAccount(potentialUser)
            unique=mongodbUnique({'handle':userData['handle']})
            if(not unique):continue
            print('storing:',potentialUser)
            storeAccount(userData)
            print('\n')
        print('\n')
        currentUserIndex+=1

if(__name__=="__main__"):
    main()
    browser.quit()
